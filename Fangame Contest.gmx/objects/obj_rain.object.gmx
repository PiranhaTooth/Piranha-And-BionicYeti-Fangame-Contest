<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///////////////////////////////////////
///  Rain settings
///////////////////////////////////////

//texture and color
//(look the other sprite subimages to understand how to draw your own drops)
tex = sprite_get_texture(spr_texture_rain, 0);
water_col = make_color_hsv(130,90,160);

//number of water drops (change it with rain_set_drop_count(count) )
rain_drops = 100;

//horizontal rain range
rain_range = 1600;

rain_direction = 270;
rain_speed = 30;
rain_sound_volume = 1;

//size of the single rain drop
rain_size = 2;

//length of the single rain drop
rain_length = 3;

//enable or disable per-pixel collision checking
rain_collision_precise = false;;


///////////////////////////////////////
///  Accurate collision checking
///////////////////////////////////////

//use accurate collision algorithm (slower)
rain_collision_accurate = false;
//number of pixels to skip(0 is the most accurate, but slower)
rain_collision_accurate_skip = 4;



///////////////////////////////////////
///  water drop collision particles
///////////////////////////////////////
system = part_system_create();
p1 = part_type_create();
part_type_speed(p1,4,12,0,0);
part_type_alpha2(p1,1,0);
part_type_direction(p1,20,160,0,0);
part_type_shape(p1,pt_shape_disk);
part_type_color2(p1,water_col, c_white);
part_type_life(p1,2,6);
part_type_size(p1,0.02,0.06,0,0);
part_type_gravity(p1,0.2,270);
part_system_depth(system,1002);

//play thunder sound before raining
audio_play_sound(sfx_thunder,1,0);  


//setup the rain 
rain[rain_drops*2] = 0;
for(var i = 0; i &lt; rain_drops * 2; i+=2)
{ 
    rain[i] = random_range(x - rain_range, x + rain_range);
    rain[i+1] = y - random(50);  
}


rain_started = false; 

//wait 2 second and start raining
alarm[0] = room_speed*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//stop the rain sound
audio_stop_sound(sfx_rain);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> 

if(!audio_is_playing(sfx_rain)){
    audio_play_sound(sfx_rain,10,1);
    audio_sound_gain(sfx_rain, 0, 0);
    audio_sound_gain(sfx_rain, rain_sound_volume, 300);
}
    
rain_started = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(irandom(900) == 5){
    if(!audio_is_playing(sfx_thunder)){
        audio_play_sound(sfx_thunder,5,0);
    }
}
  
if(rain_started){
    var rain_hs = lengthdir_x(rain_speed, rain_direction);
    var rain_vs = lengthdir_y(rain_speed, rain_direction);
    var px,py; 
    
    if(!rain_collision_accurate){
        for(i = 0; i &lt; rain_drops * 2; i += 2)
        {
            rain[i] += rain_hs;
            rain[i+1] += rain_vs;
            px = rain[i];
            py = rain[i+1];
            if(rain[i+1] &gt; room_height){ 
                rain[i] = random_range(x - rain_range, x + rain_range);
                rain[i+1] = y - random(50); 
            }
            else if(collision_point(px,py,obj_rain_parent_collision, rain_collision_precise, true)){
                part_particles_create(system,rain[i],rain[i+1]-rain_vs,p1,1+irandom(2))
                rain[i] = random_range(x - rain_range, x + rain_range);
                rain[i+1] = y - random(50);  
            }
        }       
    }
    else{
        //prepare direction check array
        var dx, dy;
        var q = 1+ rain_collision_accurate_skip;
        var n = 0;
        for(i=0; i&lt;=rain_speed; i+=q){
            dx[n] = lengthdir_x(i, rain_direction);
            dy[n] = lengthdir_y(i, rain_direction);
            n++;
        }
        
        for(i = 0; i &lt; rain_drops * 2; i += 2)
        {
        
            px = rain[i];
            py = rain[i+1];
            
            if(rain[i+1] &gt; room_height){ 
                rain[i] = random_range(x - rain_range, x + rain_range);
                rain[i+1] = y - random(50); 
            }//-rain_hs*rain_size, rain[i+1]-rain_vs*rain_length*rain_size
            else {
                var m = 0;
                for(j=rain_speed; j&gt;q; j-=q){
                    
                    if(collision_point(px+dx[m],py+dy[m], obj_rain_parent_collision, rain_collision_precise, true)){
                        part_particles_create(system,px+dx[m],py+dy[m],p1,1+irandom(2))
                        rain[i] = random_range(x - rain_range, x + rain_range);
                        rain[i+1] = y - random(50);  
                        break;
                    }
                    m++;
                } 
                rain[i] += rain_hs;
                rain[i+1] += rain_vs;
            }
        }
    }
    
     
    var old_color = draw_get_color();
    draw_set_color(make_color_hsv(130,42,150)); 
    draw_primitive_begin_texture(pr_trianglelist, tex); 
    var n = 0;
    for(i = 0; i &lt; rain_drops * 2; i += 2)
    {
        draw_vertex_texture(rain[i]-rain_size, rain[i+1]+5*rain_size, 0,1); 
        draw_vertex_texture(rain[i]+rain_size, rain[i+1]+5*rain_size, 1,1); 
        draw_vertex_texture(rain[i]-rain_hs*rain_length*rain_size, rain[i+1]-rain_vs*rain_length*rain_size, 0.5,0);  
        n+=3;
        if(n &gt;= 999){ 
            draw_primitive_end();  
            draw_primitive_begin_texture(pr_trianglelist, tex); 
        }
    }
    draw_primitive_end();  
    draw_set_color(old_color);
     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
